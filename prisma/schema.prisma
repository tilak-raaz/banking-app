generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String?
  image          String?
  emailVerified  DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  bankingProfile BankingProfile?
  sessions       Session[]
}

model BankingProfile {
  id              String        @id @default(cuid())
  userId          String        @unique
  accountNumber   String        @unique
  accountType     String        @default("CHECKING")
  balance         Float         @default(0)
  firstName       String
  lastName        String
  phoneNumber     String?
  address         String?
  dateOfBirth     DateTime?
  isActive        Boolean       @default(true)
  accountOpenDate DateTime      @default(now())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[]
}

model Transaction {
  id           String         @id @default(cuid())
  profileId    String
  type         String
  amount       Float
  description  String
  category     String?
  balanceAfter Float
  createdAt    DateTime       @default(now())
  profile      BankingProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
